VCS- Version Control System

Local VCS - tracking version controlling using local hard drive available in own pc. All the other people involved in the project will make changes only in that 1 pc

Centralised VCS - a centralised server is set-up somewhere
People send pull requests to the server to get the files..
make changes into it and then again push the updated files back into the server.
This approach is better than the previous one..but what if the server gets damaged??
We cannot get older versions of the program from Centralised VCS

Distributed VCS - All the data is distributed to all the people who are collaborating..ie all the history of the files is sent to all people..
Thus back-up is maintained by every user


Features of GIT:

1. It captures snapshots and not the differences
.git file contains all the project history

2. Almost every operation is local
remote operations are dependent on server / internet
local operations are limited to our working device

3. GIT has integrity (files are safe to keep)
SHA checksum is use to check the authenticity of a file

eg. We are downloading a file/ folder from a website
The website will tell us that after downloading the checksum of the file should be this much. We downloaded and then we checked its checksum..if checksum does not match with that mentioned one on the website, then we come to know that the file has been changed

4. GIT generally adds data
Generally user keeps on updating the data..ie he adds data thus addition takes place

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. install git (sudo apt update
		sudo apt install git)

pwd - present working directory
cd - change directory
First we go to the project directory and then apply all git commands in it
We can either use git terminal commands to work with git
or we can use GUI 
GUI is easier to use..but we will first use terminal tools

git config --global user.name "pratham022"
git config --global user.email "pthombre657@gmail.com"

git config --list
git config user.name
git config user.email

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

I : working directory
II : staging area - files you expect to go to the next stage
III : git directory(repository)

eg. We have 3 files in our working directory
1. index.html
2. engine.js
3. index.css
And we ahve already created version 1 of our software
Now, suppose we improve index.html and index.css files
But, while updating engine.js we introduced some errors
So, we decided to use updated index.html and index.css files and keep the earlier version of engine.js
So, in this case we would STAGE index.html and index.css
files and not engine.js
Then we can commit these 2 files (snapshot of those files is taken)


working		   staging area			git repository
directory		
			|				|
			|      <<-----------------------|
			|	checkout the project	|
----------->>		|				|
stage files		|				|
			|				|
			|--------------->>		|
			|	commit

---------------------------------------------------------------------------------------------------------------------------------------------------------------------


prathamesh@Inspiron-3576:~/GIT_Projects$git status
fatal: not a git repository (or any of the parent directories): .git
we use git status command to get the status of the folder

prathamesh@Inspiron-3576:~/GIT_Projects$git init
Initialized empty Git repository in /home/prathamesh/GIT_Projects/.git/
git init is used to initialise a project as git project

git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	main_file.txt
	notesGIT.txt

nothing added to commit but untracked files present (use "git add" to track)

git add --a		to add all the files to staging area

On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   main_file.txt
	new file:   notesGIT.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   notesGIT.txt


Now after staging the files we can commit them using git commit command

prathamesh@Inspiron-3576:~/GIT_Projects$git commit -m "Initial commit"
[master (root-commit) e72b4e7] Initial commit
 2 files changed, 111 insertions(+)
 create mode 100644 main_file.txt
 create mode 100644 notesGIT.txt

--------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------IMPORTANT GIT COMMANDS---------------------------
git status

git add --a
git add filename

git commit -m "Initial Commit"

git log

rm -rf .git			-- to stop tracking

git clone url

touch filename.ext		-- creates new file

touch .gitignore
Inside the .gitignore file
write error.log			-- error.log is the file name
*.log 				-- ignores all the .log files
directory_name/			-- ignores the directory

Now, error.log is ignored by git

git diff

git diff compares working directory with staging area
It is a very useful command

git diff --staged
git diff --staged compares previous commit with current staging area
-------------------------------------------------------------------------------

git commit -a -m "direct commit"	-- pushes all the tracked files directly into the commit..by skipping the staging area
					-- untracked files are not commited..we have to compulsorily push then into the staging area

--------------------------------------------------------------------------------------------------------------------------------------------------------------

untracked --> unmodified --> modified --> staged
    when we add files for 
       the first time

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Renaming in git

If we simply rename a file, then git considers that initial file is deleted and creates nw file and gets its status as untracked.
If we then add our file into the staging area then git comes to know that the file was renamed!!
Then we can commit the file

If we manually delete a file then we have to manually stage the changes into the staging area(ie by using add command)
But if we use the below command, git automatically stages the changes.
Then we just need to commit those changes

git rm third.txt


git mv oldname.txt newname.txt

------------------------------------------------
eg. Suppose we were tracking a file earlier, and now we do not want to track that file.
Thus we mentioned that file in git ignore.
Then we make changes into that file.
We were expecting that git should not bother about the changes from now related to that file as we have already commited those changes.
But we see that git keeps on tracking that file
Thus we need to tell git explicitly that do not track this file
Command for above is:

git rm --cached db.accdb

-------------------------------------------------

git log -p	-- gives detailed info about commit

git log -p -3	-- shows previous 3 commits

git log --stat	-- gives short summary about commits

git log --pretty=oneline
git log --pretty=short
git log --pretty=full
git log --since=2.days
git log --since=2.years
git log --since=2.months

git log --pretty=format: "%h -- %an"

explore about this on git acm

---------------------------------------------------
git log -p -1
git commit --amend

-----------------------------------------------
unstaging a file

git add first.txt
--Now the above file is staged
--To unstage the file, we use

git restore --staged first.txt

-----------------------------------------------
to unmodify a file

git checkout -- filename.ext  (IMPORTANT but risky command)

git checkout -f			--we go to the previous commit

-----------------------------------------------------------------------------------------
Working with remote repositories

git status - To get the status of current directory

git remote - This is used to know the remote repository
Initially when we use this command, it will not show anything because we have not synced with any remote repository

First we go to github and create a new repository.
After setting up the name of the repo, it will provide us with 3 options.
We will select adding files through local repository ie push fies from local repo

Copy the command provided there:

git remote add origin https://github.com/pratham022/Git-Tutorial.git

Now use the command: git remote
It will now show origin as the remote repository

git remote -v	- This command will give the links for fetch and pull operations

*******
git push -u origin master		-- This command is used to push the local repository onto the remote repository
Initially when we use this command, it may accept your push or it may throw an error that access is denied.

We should get access denied error because, we are pushing local repo to our github for the first time.

So, we need to tell github that this machine which is trying to push contents onto the remote repository is mine only. (or belonds to my network)
For that configure the ssh key

Search for 'ssh key github' and follow the steps to create a ssh key

1. ssh-keygen -t rsa -b 4096 -C "pthombre657@gmail.com"

Press enter when the prompt asks for passphrase and other things

2. eval "$(ssh-agent -s)"

3. ssh-add ~/.ssh/id_rsa

4. tail ~/.ssh/id_rsa.pub

The 4th command will generate the ssh key.
Copy paste that key inrto the ssh settings of your github account. (Settings->SSH and keys-> New SSH key)

And now we can push contents from our local repo to our remote github account!!
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Branching in git:

1. Create a branch:
git branch <branch_name>

2. Switch to that branch:
git checkout <branch_name>






